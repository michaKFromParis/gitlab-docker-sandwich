#!/bin/bash
################################################################################
#
# BuildSparks.sh created on 2014-44-01 by michaK
#
#                       Sparks Cross Platform build script
#
#                       Shell Utilities
#
#
#                                                 Copyright iVoltage 2009-2014
#
################################################################################

################################################################################
############################# Service Status ###################################
################################################################################

service-running ()
{
  $sudo docker inspect $1 2> /dev/null | awk '/"Running": true/{m=1}END{if (!m) exit 1; exit 0;}'
  if [ $? -eq 0 ]; then
    Log "$1 is running"
    return 0
  else
    Log "$1 is not running"
    return 1
  fi
}

service-exists ()
{
  id=$($sudo docker inspect --format {{.Id}} $1 2> /dev/null)
  if [ $? -eq 0 ]; then
    Log "$1 exists"
    return 0
  else
    Log "$1 does not exist"
    return 1
  fi
}

service-stop ()
{
  local serviceName=$1
  if service-exists $serviceName ; then
    Log "Stoping $serviceName ($id)"
    if service-running $serviceName ; then
      $sudo docker stop -t=20 "$id" > /dev/null;
    fi
    service-remove $serviceName
  fi
}

service-remove ()
{
  local serviceName=$1

  id=$($sudo docker inspect --format {{.Id}} $serviceName 2> /dev/null)
  if [ $? -eq 0 ]; then
    Log "Removing $serviceName ($id)"
    $sudo docker rm "$id" > /dev/null
  fi
}

cleanup ()
{
  $sudo docker ps -a | sed 1d | cut -d ' ' -f 1 | xargs -i sh -c '$sudo docker stop {}; $sudo docker rm {};'
}

################################################################################
############################# DNS Helper #######################################
################################################################################

container-ip ()
{
  $sudo docker inspect --format {{.NetworkSettings.IPAddress}} $1
}

enforce-hosts-ip ()
{
  local container=$1
  local containerHostname=$2
  local targetContainer=$3

  ipAddress=$($sudo docker inspect --format {{.NetworkSettings.IPAddress}} ${container})
  Log "Setting $containerHostname ip to $ipAddress inside $targetContainer"
  local escapedhostname=$(echo $containerHostname | sed 's/\./\\\./g')
  # LogImportant "escaped : $escapedhostname"
  # LogImportant "hosts before"
  # set -x
  # $sudo docker exec $targetContainer bash -c "cat /etc/hosts"
  # series of tricks to avoid inode change of /etc/hosts
  $sudo docker exec $targetContainer bash -c "grep -v ${escapedhostname} /etc/hosts > /etc/hosts.new; cat /etc/hosts.new > /etc/hosts; rm /etc/hosts.new"
  $sudo docker exec $targetContainer bash -c "echo -e \"$ipAddress\t${containerHostname}\" >> /etc/hosts"
  # set +x
  # LogImportant "hosts after"
  # $sudo docker exec $targetContainer bash -c "cat /etc/hosts"
}

enforce-timezone ()
{
  local container=$1
  Log "Setting timezone to $timezone inside $container"
  $sudo docker exec $container bash -c "echo \"$timezone\" > /etc/timezone; dpkg-reconfigure -f noninteractive tzdata > /dev/null 2>&1"
}

enforce-sudoers ()
{
  local container=$1
  local username=$2
  Log "granting sudo to $username inside $container"
  $sudo docker exec $container bash -c "echo \"$username ALL=(ALL) NOPASSWD:ALL\" >> /etc/sudoers"
}
################################################################################
############################# Log ##############################################
################################################################################

verbose=false
colors=true

if [ $colors = true ]; then
  # Emoji unicode characters
  ################################################################################
  beers=$'\360\237\215\273'
  failure=$'\360\237\215\271'
  wine=$'\360\237\215\267'
  trophy=$'\360\237\217\206'
  bomb=$'\360\237\222\243'
  strawberry=$'\xF0\x9F\x8D\x93'
  highvoltage=$'\xE2\x9A\xA1'
  banana=$'\xF0\x9F\x8D\x8C'
  cherry=$'\xF0\x9F\x8D\x92'

  success=$beers
  failure=$bomb

  RCol='\e[0m'    # Text Reset

  # Regular           Bold                Underline           High Intensity      BoldHigh Intens     Background          High Intensity Backgrounds
  Bla='\e[0;30m';     BBla='\e[1;30m';    UBla='\e[4;30m';    IBla='\e[0;90m';    BIBla='\e[1;90m';   On_Bla='\e[40m';    On_IBla='\e[0;100m';
  Red='\e[0;31m';     BRed='\e[1;31m';    URed='\e[4;31m';    IRed='\e[0;91m';    BIRed='\e[1;91m';   On_Red='\e[41m';    On_IRed='\e[0;101m';
  Gre='\e[0;32m';     BGre='\e[1;32m';    UGre='\e[4;32m';    IGre='\e[0;92m';    BIGre='\e[1;92m';   On_Gre='\e[42m';    On_IGre='\e[0;102m';
  Yel='\e[0;33m';     BYel='\e[1;33m';    UYel='\e[4;33m';    IYel='\e[0;93m';    BIYel='\e[1;93m';   On_Yel='\e[43m';    On_IYel='\e[0;103m';
  Blu='\e[0;34m';     BBlu='\e[1;34m';    UBlu='\e[4;34m';    IBlu='\e[0;94m';    BIBlu='\e[1;94m';   On_Blu='\e[44m';    On_IBlu='\e[0;104m';
  Pur='\e[0;35m';     BPur='\e[1;35m';    UPur='\e[4;35m';    IPur='\e[0;95m';    BIPur='\e[1;95m';   On_Pur='\e[45m';    On_IPur='\e[0;105m';
  Cya='\e[0;36m';     BCya='\e[1;36m';    UCya='\e[4;36m';    ICya='\e[0;96m';    BICya='\e[1;96m';   On_Cya='\e[46m';    On_ICya='\e[0;106m';
  Whi='\e[0;37m';     BWhi='\e[1;37m';    UWhi='\e[4;37m';    IWhi='\e[0;97m';    BIWhi='\e[1;97m';   On_Whi='\e[47m';    On_IWhi='\e[0;107m';
else
  success=''
  failure=''

  RCol=''    # Text Reset

  # Regular           Bold                Underline           High Intensity      BoldHigh Intens     Background          High Intensity Backgrounds
  Bla='';     BBla='';    UBla='';    IBla='';    BIBla='';   On_Bla='';    On_IBla='';
  Red='';     BRed='';    URed='';    IRed='';    BIRed='';   On_Red='';    On_IRed='';
  Gre='';     BGre='';    UGre='';    IGre='';    BIGre='';   On_Gre='';    On_IGre='';
  Yel='';     BYel='';    UYel='';    IYel='';    BIYel='';   On_Yel='';    On_IYel='';
  Blu='';     BBlu='';    UBlu='';    IBlu='';    BIBlu='';   On_Blu='';    On_IBlu='';
  Pur='';     BPur='';    UPur='';    IPur='';    BIPur='';   On_Pur='';    On_IPur='';
  Cya='';     BCya='';    UCya='';    ICya='';    BICya='';   On_Cya='';    On_ICya='';
  Whi='';     BWhi='';    UWhi='';    IWhi='';    BIWhi='';   On_Whi='';    On_IWhi='';
fi

Log ()
{
  if [ $verbose = true ]; then
    printf "[${IYel}$(date +%T)${RCol}] ${Blu}==>${RCol} $1\n"
  fi
}

LogImportant ()
{
  printf "[${IYel}$(date +%T)${RCol}] ${Cya}==>${RCol} $1\n"
}

LogWarning ()
{
  printf "[${IYel}$(date +%T)${RCol}] ${Yel}==>${RCol} $1\n"
}

LogSuccess ()
{
    printf "[${IYel}$(date +%T)${RCol}] ${BIBlu} ${success}  Success:${RCol} $1\n"
}

LogError ()
{
  hms $SECONDS
  printf "[${Red}$(date +%T)${RCol}] ${BIRed} ${failure}  Error${RCol}: $1 in $hms_str\n\n"
  exit -1
}

if [ "$(uname)" = "Darwin" ]; then
  revision="$(sw_vers -productVersion | cut -d . -f2)"
  if [ $revision -lt 9 ]; then
#   Log "OSX $(sw_vers -productVersion) detected."
# else
    LogError "This script requires OSX 10.9.x or higher to run. Please upgrade your computer"
  fi
  scriptPlatform='OSX'
elif [ "$(expr substr $(uname -s) 1 5)" = "Linux" ]; then
  scriptPlatform='Linux'
elif [ "$(expr substr $(uname -s) 1 10)" = "MINGW32_NT" ]; then
  scriptPlatform='Windows'
elif [ "$(expr substr $(uname -s) 1 10)" = "Windows_NT" ]; then
  scriptPlatform='Windows'
fi

if [ "${scriptPlatform}" = "Windows" ]; then
  scriptArch='x86'
else  
  scriptArch=`uname -m`
  if [ ${scriptArch} = 'i686' ]; then
    scriptArch='x86'
  fi
fi

################################################################################
############################# Utilities Functions ##############################
################################################################################

TranslatePlatform ()
{
  local str=$1
  platformName=${str:0:1}
  buildConfiguration=${str:1:1}
  case $platformName in
    'i') platformName='iOS'; platformFullName=$platformName ;;
    'o') platformName='OSX'; platformFullName=$platformName ;;
    'a') platformName='Android'; platformFullName=$platformName ;;
    'e') platformName='Emscripten'; platformFullName=$platformName ;;
    'w') platformName='Windows'; platformFullName=$platformName ;;
    'l') platformName='Linux'; platformFullName=$platformName ;;
    'n') platformName='NaCl'; platformFullName=$platformName ;;
    'T')
      platformName='Tool'
      local sparksPlatformName=${str:2:1}
      case $sparksPlatformName in
        'o') platformFullName='Sparks-OSX' ;;
        'w') platformFullName='Sparks-Windows' ;;
        'l') platformFullName='Sparks-Linux' ;;
      esac
      ;;
  esac
  case $buildConfiguration in
    'd') buildConfiguration='Debug' ;;
    'r') buildConfiguration='Release' ;;
    's') buildConfiguration='Shipping' ;;
  esac
}

# converts a number of seconds into 1h 23m 12s
################################################################################

hms_str=''
hms ()
{
  secs=${1:?}
  h=$(( secs / 3600 ))
  m=$(( ( secs / 60 ) % 60 ))
  s=$(( secs % 60 ))

  #printf "%02d:%02d:%02d" $h $m $s
  if [ $h -gt 0 ]; then hms_str="${h}h ${m}m ${s}s" return 0; fi
  if [ $m -gt 0 ]; then hms_str="${m}m ${s}s"; return 0; fi
  if [ $s -gt 0 ]; then hms_str="${s}s"; return 0; fi
  hms_str="0s";
}

PromptYesNo ()
{
  if [ "${autoYes}" = true ]; then
    return 0
  fi
  while true; do
    LogImportant "$1 [Y/n]"
    read yn
    case $yn in
      [Yy]* ) LogImportant "Yes"; return 0;;
      [Nn]* ) return 1;;
      ""* ) LogImportant "Yes"; return 0;;
      * ) LogWarning "I beg your pardon. Please answer Yes or No.";;
    esac
  done
}

PromptNoYes ()
{
  while true; do
    LogImportant "$1 [N/y]"
    read yn
    case $yn in
      [Yy]* ) LogImportant "Yes"; return 0;;
      [Nn]* ) return 1;;
      ""* ) LogImportant "No"; return 1;;
      * ) LogWarning "I beg your pardon. Please answer Yes or No.";;
    esac
  done
}

GitClone ()
{
  url=$1
  branch=$2
  directory=$3

  export GITLAB_CI_GIT_OVERRIDE_DISABLED=1
  if [ $# -eq 4 ] && [ $4 = true ]; then
    cleanCheckout=true
  else
    cleanCheckout=false
  fi
  
  logUrl=$(echo $url | sed s#//.*@#//#g)
  oldPwd=$(pwd)
  git config --global http.sslVerify false
  if [ ! -d "$directory/.git" ]; then
    LogImportant "Removing existing non git directory: $directory"
    rm -rf "$directory"
  fi
  if [ ! -d "$directory" ]; then
    Log "Cloning a new git repository from $logUrl"
    git clone -b "$branch" "$url" "$directory" -q > /dev/null
    if [ $? -ne 0 ]; then
      LogError "Failed to git clone from $logUrl"
    fi
    cd "$directory"
    Log "Updating submodules"
    git submodule update --init -q > /dev/null
    if [ $? -ne 0 ]; then
      LogError "Failed to update git submodules"
    fi
  else
    cd "$directory"
    if [ $cleanCheckout = true ]; then
      Log "Reverting previous changes to git repository"
      git reset --hard -q > /dev/null
      if [ $? -ne 0 ]; then
        LogError "Failed to revert git changes"
      fi
      Log "Cleaning"
      git clean -fd > /dev/null
      if [ $? -ne 0 ]; then
        LogError "Failed to clean git changes"
      fi
    fi
    Log "Updating submodules"
    git submodule update --init -q > /dev/null
    if [ $? -ne 0 ]; then
      LogError "Failed to update git submodules"
    fi
#    if [ $cleanCheckout = true ]; then
      Log "Checking out $branch"
      git checkout "$branch" -q > /dev/null
      if [ $? -ne 0 ]; then
        LogError "Failed to checkout $branch"
      fi
#    fi
    Log "Pulling latest changes from $logUrl"
    git pull origin "$branch" -q > /dev/null
    if [ $? -ne 0 ]; then
      LogError "Failed to pull changes from $logUrl"
    fi
  fi
  cd "$oldPwd" &> /dev/null
}

CenterText ()
{
  text=$1
  columns=$2
  color=$3

  if [ $# -ne 3 ]; then
    LogWarning "CenterText received only 2 parameters: $1, $2"
    LogWarning "This will crash the formating"
  fi
  #echo "text: $text, width: $column, color: $color"
  lpad=$(((${#text} + $columns)/2))
  #printf "%d" $lpad
  rpad=$(($columns - $lpad))
  #printf "%d" $rpad
  printf "${color}%*s%*s${RCol}" $lpad "$text" $rpad ' '
}

generate-ssl-certificates ()
{
  if [ ! -d $sslKeysDirectory ]; then
    # SSL certificate
    if ! which socat || ! which openssl ; then
      apt-get update && apt-get install -y socat openssl;
    fi
    # for pkg in socat openssl ; do
    #   which $pkg >/dev/null 2>&1 || { apt-get update && apt-get install -y socat openssl; }
    # done 
    LogImportant "Generating SSL certificate"
    mkdir -p "$sslKeysDirectory"
    cd "$sslKeysDirectory"
    { echo $SSLPassword; echo $SSLPassword; } | socat - exec:'openssl genrsa -des3 -out server.key 1024',pty,setsid,ctty
    {
      echo $SSLPassword
      echo $SSLCountryCode
      echo $SSLState
      echo $SSLCity
      echo $SSLCompany
      echo $SSLUnit
      echo $SSLVirtualHost
      echo $SSLEmail
      echo
      echo
    } | socat - exec:'openssl req -new -key server.key -out server.csr',pty,setsid,ctty
    cp server.key server.key.org
    { echo $SSLPassword; } | socat - exec:'openssl rsa -in server.key.org -out server.key',pty,setsid,ctty
    openssl x509 -req -days 365 -in server.csr -signkey server.key -out server.crt
    openssl dhparam -out dhparam.pem 2048
    cp server.crt ca.crt
    mv server.crt $SSLKeyPrefix.crt
    mv server.key $SSLKeyPrefix.key
    cd -
  fi
}

getLatestVersion ()
{
  service=$1
   curl -s "https://api.github.com/repos/sameersbn/docker-$service/tags" | grep name | head -n 1 | cut -d \" -f4 | tr -d 'v'
}

checkVersion ()
{
  local v1=$1

  echo $v1 | grep -E "^[0-9]+(\.[0-9]+){0,3}$" > /dev/null
  if [ $? -ne 0 ]; then
    return -1
  else
    local dotCount=$(echo $v1 | tr -d -c '.' | wc -c)
    if [ $dotCount -eq 0 ]; then
      echo "${v1}.0.0.0"
    elif [ $dotCount -eq 1 ]; then
      echo "${v1}.0.0"
    elif [ $dotCount -eq 2 ]; then
      echo "${v1}.0"
    else
      echo "${v1}"
    fi
  fi
}

compareVersions ()
{
  typeset    IFS='.'
  typeset -a v1=( $1 )
  typeset -a v2=( $2 )
  typeset    n diff

  for (( n=0; n<4; n+=1 )); do
    diff=$((v1[n]-v2[n]))
    if [ $diff -ne 0 ] ; then
      [ $diff -le 0 ] && echo '-1' || echo '1'
      return
    fi
  done
  echo '0'
}

Execute ()
{
  shellCommand=$1
  if [ $verbose = true ]; then
    Log "${shellCommand}"
    eval "${shellCommand}"
    exitCode=${PIPESTATUS[0]}
  else
    eval "${shellCommand}" > /dev/null 2>&1
    exitCode=${PIPESTATUS[0]}
  fi
  return $exitCode
}

ExecuteOrFail ()
{
  shellCommand=$1
  message=$2

  Execute "${shellCommand}"
  exitCode=$?
  if [ $exitCode -ne 0 ]; then
    str=$shellCommand
    if [ -n "$message" ]; then
      str="$str\n$message"
    fi
    LogError "$str"
  fi
  return $exitCode
}

if [ "$(uname)" = "Darwin" ]; then
  # LogImportant "OSX $(sw_vers -productVersion) detected."
  revision="$(sw_vers -productVersion | cut -d . -f2)"
  if [ $revision -lt 9 ]; then
#   Log "OSX $(sw_vers -productVersion) detected."
# else
    LogError "This script requires OSX 10.9.x or higher to run. Please upgrade your computer"
  fi
  scriptPlatform='OSX'
elif [ "$(expr substr $(uname -s) 1 5)" = "Linux" ]; then
  scriptPlatform='Linux'
elif [ "$(expr substr $(uname -s) 1 10)" = "MINGW32_NT" ]; then
  scriptPlatform='Windows'
elif [ "$(expr substr $(uname -s) 1 6)" = "CYGWIN" ]; then
  scriptPlatform='Windows'
elif [ "$(expr substr $(uname -s) 1 10)" = "Windows_NT" ]; then
  scriptPlatform='Windows'
fi

if [ "${scriptPlatform}" = "Windows" ]; then
  scriptArch='x86'
else  
  scriptArch=`uname -m`
  if [ ${scriptArch} = 'i686' ]; then
    scriptArch='x86'
  fi
fi

if [ $scriptPlatform = 'OSX' ]; then
  xsed="sed -i ''"
else
  xsed="sed -i"
fi
